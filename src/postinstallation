#!/bin/bash

### IMPORTANT VARIABLES ###

# git repo for dotfiles
dotrepo="https://github.com/tmpstpdwn/.dotfiles"

# Define the path to the packages file
package_file="$HOME/.packages"

# Directory array
folders=(
    "$HOME/Documents" "$HOME/Downloads" "$HOME/Files" \
    "$HOME/Pictures" "$HOME/Repos" "$HOME/Videos" \
    "$HOME/Pictures/Screenshots"
)

# Define the repository URLs and their corresponding directories
declare -A repos
repos=(
    ["https://github.com/tmpstpdwn/dmenu"]="$HOME/Repos/dmenu"
    ["https://github.com/tmpstpdwn/wallpapers"]="$HOME/Pictures/Wallpapers"
)

# Relax time after each fn.
relax=3

# Countdown to reboot var.
countdown=20

### FUNCTIONS ###

# Function to print a section header
function print_header() {
    clear
    echo
    echo "--------------------"
    echo "  Postinstallation - $1"
    echo "--------------------"
    echo
}

# Function to print a section footer
function print_footer() {
    echo
    echo " Done. - $1"
    echo "********"
    echo
}

# Fn to reboot after installation.
function reboot_sys() {
    print_header "Installation complete. Reboot?"
    while [ $countdown -gt 0 ]; do
        echo -ne "Reboot in ${countdown}s, Ctrl-C to cancel...\r";
        sleep 1;
        ((countdown--));
    done
    reboot
}

function startup() {
    print_header "start?"
    read -p "start ? [y/N]"
    if [[ $confirm != "y" ]]; then
        { echo "Aborting."; echo; exit 1; }
    fi
}


# Function to handle dotfiles setup
function setup_dotfiles() {
    print_header "Dotfiles Setup"
    cd "$HOME" || { echo "Failed to cd to $HOME"; exit 1; }

    read -p "This program will move all the things in $HOME to .backup/ for dotfile installation. Proceed? (y/N) " confirm
    if [[ $confirm != "y" ]]; then
        { echo "Aborting."; echo; exit 1; }
    fi

    # Create a backup directory if it doesn't exist
    mkdir -p .backup

    # Move existing files to the backup directory
    echo "Moving existing files in $HOME to .backup/..."
    for file in .* *; do
        # Skip the backup directory itself and the current directory
        if [[ "$file" != ".backup" && "$file" != "." && "$file" != ".." ]]; then
            mv "$file" .backup/ || { echo "Failed to move $file to .backup."; exit 1; }
        fi
    done

    # Set up alias for dotfiles management
    alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
    echo ".dotfiles" >> .gitignore

    # Clone the bare repository
    echo "Cloning repository..."
    git clone --bare "$dotrepo" --depth 1 "$HOME/.dotfiles" || { echo "Failed to clone repository."; exit 1; }

    # Checkout the dotfiles
    echo "Checking out dotfiles..."
    dotfiles checkout 2>&1 | grep -q "error" && {
      echo "Some files already exist in your home directory and conflict with dotfiles."
      exit 1
    }

    dotfiles config --local status.showUntrackedFiles no
    print_footer "Dotfile setup complete."
}

# Function to create important directories
function create_directories() {
    print_header "Important Directories Setup"
    # Loop through the array and create folders
    for folder in "${folders[@]}"; do
        mkdir -p "$folder" # -p ensures no error if the folder already exists
        echo "Created folder: $folder"
    done
    print_footer "Important directories created."
}

# Function to install packages
function install_packages() {
    print_header "Package Installation"
    # Check if the file exists
    if [[ ! -f "$package_file" ]]; then
        echo "Error: The file $package_file does not exist."
        exit 1
    fi

    # Log file for package installation
    log_file="$HOME/package_install_log.txt"

    # Read the file line by line and install each package
    while IFS= read -r package; do
        if [[ -n "$package" && ! "$package" =~ ^# ]]; then # Ignore empty lines and comments
            echo "Installing package: $package"

            # Install the package using pacman
            pacman -Qi "$package" > /dev/null || sudo pacman -S --noconfirm "$package" >> "$log_file" 2>&1

            if [[ $? -eq 0 ]]; then
                echo "Successfully installed $package"
            else
                echo "Error installing $package: see $log_file for details"
            fi
        fi
    done < "$package_file"
    print_footer "Package installation completed."
}

# Function to set up repositories at specific locations
function setup_repos() {
    print_header "Repositories Setup"
    # Loop through the repositories array and clone them to their respective directories
    for repo_url in "${!repos[@]}"; do
        dest_dir="${repos[$repo_url]}"
        echo "Cloning $repo_url into $dest_dir..."
        git clone "$repo_url" "$dest_dir" || { echo "Failed to clone $repo_url"; exit 1; }
        echo "Cloned $repo_url to $dest_dir"
    done
    print_footer "Repositories setup completed."
}

# Main function to execute post-installation tasks
function post_installation() {

    # Execute each section
    startup
    sleep $relax
    setup_dotfiles
    sleep $relax
    create_directories
    sleep $relax
    install_packages
    sleep $relax
    setup_repos
    sleep $relax
    reboot_sys

}

### MAIN ###

# Run the main function with the provided argument
post_installation

### END ###
